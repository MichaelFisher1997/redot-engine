<?xml version="1.0" encoding="UTF-8" ?>
<class name="ResourceImporterSpriteFrames" inherits="ResourceImporter" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<tutorials>
	</tutorials>
	<members>
		<member name="animation/frame_speed_multiplier" type="float" setter="" getter="" default="1">
			The multiplier for each frame's delay.
		</member>
		<member name="animation/loops" type="bool" setter="" getter="" default="true">
			If [code]true[/code], loops the sprite frame infinitely.
		</member>
		<member name="animation/max_frames" type="int" setter="" getter="" default="0">
			Controls the max amount of frames that will be imported.
		</member>
		<member name="compress/channel_pack" type="int" setter="" getter="" default="0">
			Controls how color channels should be used in the imported texture.
			[b]sRGB Friendly:[/b] Prevents the RG color format from being used, as it does not support sRGB color.
			[b]Optimized:[/b] Allows the RG color format to be used if the texture does not use the blue channel. This reduces memory usage if the texture's blue channel can be discarded (all pixels must have a blue value of [code]0[/code]).
		</member>
		<member name="compress/lossy_quality" type="float" setter="" getter="" default="0.7">
			The quality to use when using the [b]Lossy[/b] compression mode. Higher values result in better quality, at the cost of larger file sizes. Lossy quality does not affect memory usage of the imported texture, only its file size on disk.
		</member>
		<member name="compress/mode" type="int" setter="" getter="" default="0">
			The compression mode to use. Each compression mode provides a different tradeoff:
			[b]Lossless[/b]: Original quality, high memory usage, high size on disk, fast import.
			[b]Lossy:[/b] Reduced quality, high memory usage, low size on disk, fast import.
			[b]Basis Universal:[/b] Reduced quality, low memory usage, lowest size on disk, slow import. Only use for textures in 3D scenes, not for 2D elements.
			See [url=$DOCS_URL/tutorials/assets_pipeline/importing_images.html#compress-mode]Compress mode[/url] in the manual for more details.
		</member>
		<member name="compress/normal_map" type="int" setter="" getter="" default="0">
			When using the textures' as normal map, only the red and green channels are required. Given regular texture compression algorithms produce artifacts that don't look that nice in normal maps, the RGTC compression format is the best fit for this data. Forcing this option to Enable will make Redot import the image as RGTC compressed. By default, it's set to Detect. This means that if the texture is ever detected to be used as a normal map, it will be changed to Enable and reimported automatically.
			Note that RGTC compression affects the resulting normal map image. You will have to adjust custom shaders that use the normal map's blue channel to take this into account. Built-in material shaders already ignore the blue channel in a normal map (regardless of the actual normal map's contents).
		</member>
		<member name="compress/rdo_quality_loss" type="float" setter="" getter="" default="0.0">
			If greater than or equal to [code]0.01[/code], enables Rate-Distortion Optimization (RDO) to reduce file size. Higher values result in smaller file sizes but lower quality.
			[b]Note:[/b] Enabling RDO makes encoding times significantly longer, especially when the image is large.
			See also [member ProjectSettings.rendering/textures/basis_universal/rdo_dict_size] and [member ProjectSettings.rendering/textures/basis_universal/zstd_supercompression_level] if you want to reduce the file size further.
		</member>
		<member name="compress/uastc_level" type="int" setter="" getter="" default="0">
			The UASTC encoding level. Higher values result in better quality but make encoding times longer.
		</member>
		<member name="mipmaps/generate" type="bool" setter="" getter="" default="false">
			If [code]true[/code], smaller versions of the textures are generated on import. For example, a 64×64 texture will generate 6 mipmaps (32×32, 16×16, 8×8, 4×4, 2×2, 1×1). This has several benefits:
			- Textures will not become grainy in the distance (in 3D), or if scaled down due to [Camera2D] zoom or [CanvasItem] scale (in 2D).
			- Performance will improve if the texture is displayed in the distance, since sampling smaller versions of the original texture is faster and requires less memory bandwidth.
			The downside of mipmaps is that they increase memory usage by roughly 33%.
			It's recommended to enable mipmaps in 3D. However, in 2D, this should only be enabled if your project visibly benefits from having mipmaps enabled. If the camera never zooms out significantly, there won't be a benefit to enabling mipmaps but memory usage will increase.
		</member>
		<member name="mipmaps/limit" type="int" setter="" getter="" default="-1">
			Unimplemented. This currently has no effect when changed.
		</member>
		<member name="process/channel_remap/alpha" type="int" setter="" getter="" default="3">
			Specifies the data source of the output for all the image alpha channels.
			[b]Red:[/b] Use the values from the source image's red channel.
			[b]Green:[/b] Use the values from the source image's green channel.
			[b]Blue:[/b] Use the values from the source image's blue channel.
			[b]Alpha:[/b] Use the values from the source image's alpha channel.
			[b]Red Inverted:[/b] Use inverted values from the source image's red channel ([code]1.0 - R[/code]).
			[b]Green Inverted:[/b] Use inverted values from the source image's green channel ([code]1.0 - G[/code]).
			[b]Blue Inverted:[/b] Use inverted values from the source image's blue channel ([code]1.0 - B[/code]).
			[b]Alpha Inverted:[/b] Use inverted values from the source image's alpha channel ([code]1.0 - A[/code]).
			[b]Unused:[/b] Set the color channel's value to the default ([code]1.0[/code] for alpha, [code]0.0[/code] for red, green or blue).
			[b]Zero:[/b] Set the color channel's value to [code]0.0[/code].
			[b]One:[/b] Set the color channel's value to [code]1.0[/code].
		</member>
		<member name="process/channel_remap/blue" type="int" setter="" getter="" default="2">
			Specifies the data source of the output for all the image blue channels.
			[b]Red:[/b] Use the values from the source image's red channel.
			[b]Green:[/b] Use the values from the source image's green channel.
			[b]Blue:[/b] Use the values from the source image's blue channel.
			[b]Alpha:[/b] Use the values from the source image's alpha channel.
			[b]Red Inverted:[/b] Use inverted values from the source image's red channel ([code]1.0 - R[/code]).
			[b]Green Inverted:[/b] Use inverted values from the source image's green channel ([code]1.0 - G[/code]).
			[b]Blue Inverted:[/b] Use inverted values from the source image's blue channel ([code]1.0 - B[/code]).
			[b]Alpha Inverted:[/b] Use inverted values from the source image's alpha channel ([code]1.0 - A[/code]).
			[b]Unused:[/b] Set the color channel's value to the default ([code]1.0[/code] for alpha, [code]0.0[/code] for red, green or blue).
			[b]Zero:[/b] Set the color channel's value to [code]0.0[/code].
			[b]One:[/b] Set the color channel's value to [code]1.0[/code].
		</member>
		<member name="process/channel_remap/green" type="int" setter="" getter="" default="1">
			Specifies the data source of the output for all the image green channels.
			[b]Red:[/b] Use the values from the source image's red channel.
			[b]Green:[/b] Use the values from the source image's green channel.
			[b]Blue:[/b] Use the values from the source image's blue channel.
			[b]Alpha:[/b] Use the values from the source image's alpha channel.
			[b]Red Inverted:[/b] Use inverted values from the source image's red channel ([code]1.0 - R[/code]).
			[b]Green Inverted:[/b] Use inverted values from the source image's green channel ([code]1.0 - G[/code]).
			[b]Blue Inverted:[/b] Use inverted values from the source image's blue channel ([code]1.0 - B[/code]).
			[b]Alpha Inverted:[/b] Use inverted values from the source image's alpha channel ([code]1.0 - A[/code]).
			[b]Unused:[/b] Set the color channel's value to the default ([code]1.0[/code] for alpha, [code]0.0[/code] for red, green or blue).
			[b]Zero:[/b] Set the color channel's value to [code]0.0[/code].
			[b]One:[/b] Set the color channel's value to [code]1.0[/code].
		</member>
		<member name="process/channel_remap/red" type="int" setter="" getter="" default="0">
			Specifies the data source of the output for all the image red channels.
			[b]Red:[/b] Use the values from the source image's red channel.
			[b]Green:[/b] Use the values from the source image's green channel.
			[b]Blue:[/b] Use the values from the source image's blue channel.
			[b]Alpha:[/b] Use the values from the source image's alpha channel.
			[b]Red Inverted:[/b] Use inverted values from the source image's red channel ([code]1.0 - R[/code]).
			[b]Green Inverted:[/b] Use inverted values from the source image's green channel ([code]1.0 - G[/code]).
			[b]Blue Inverted:[/b] Use inverted values from the source image's blue channel ([code]1.0 - B[/code]).
			[b]Alpha Inverted:[/b] Use inverted values from the source image's alpha channel ([code]1.0 - A[/code]).
			[b]Unused:[/b] Set the color channel's value to the default ([code]1.0[/code] for alpha, [code]0.0[/code] for red, green or blue).
			[b]Zero:[/b] Set the color channel's value to [code]0.0[/code].
			[b]One:[/b] Set the color channel's value to [code]1.0[/code].
		</member>
		<member name="process/fix_alpha_border" type="bool" setter="" getter="" default="true">
			If [code]true[/code], puts pixels of the same surrounding color in transition from transparent to opaque areas. For textures displayed with bilinear filtering, this helps to reduce the outline effect when exporting images from an image editor.
			It's recommended to leave this enabled (as it is by default), unless this causes issues for a particular image.
		</member>
		<member name="process/hdr_as_srgb" type="bool" setter="" getter="" default="false">
			Some HDR images you can find online may be broken and contain sRGB color data (instead of linear color data). It is advised not to use those files. If you absolutely have to, enabling [member process/hdr_as_srgb] will make them look correct.
			[b]Warning:[/b] Enabling [member process/hdr_as_srgb] on well-formatted HDR images will cause the resulting image to look too dark, so leave this on [code]false[/code] if unsure.
		</member>
		<member name="process/hdr_clamp_exposure" type="bool" setter="" getter="" default="false">
			If [code]true[/code], clamps exposure in the imported high dynamic range images using a smart clamping formula (without introducing [i]visible[/i] clipping).
			Some HDR panorama images you can find online may contain extremely bright pixels, due to being taken from real life sources without any clipping.
			While these HDR panorama images are accurate to real life, this can cause the radiance map generated by Redot to contain sparkles when used as a background sky. This can be seen in material reflections (even on rough materials in extreme cases). Enabling [member process/hdr_clamp_exposure] can resolve this.
		</member>
		<member name="process/premult_alpha" type="bool" setter="" getter="" default="false">
			An alternative to fixing darkened borders with [member process/fix_alpha_border] is to use premultiplied alpha. By enabling this option, each texture will be converted to this format. A premultiplied alpha texture requires specific materials to be displayed correctly:
			- In 2D, a [CanvasItemMaterial] will need to be created and configured to use the [constant CanvasItemMaterial.BLEND_MODE_PREMULT_ALPHA] blend mode on [CanvasItem]s that use this texture. In custom [code]@canvas_item[/code] shaders, [code]render_mode blend_premul_alpha;[/code] should be used.
			- In 3D, a [BaseMaterial3D] will need to be created and configured to use the [constant BaseMaterial3D.BLEND_MODE_PREMULT_ALPHA] blend mode on materials that use this texture. In custom [code]spatial[/code] shaders, [code]render_mode blend_premul_alpha;[/code] should be used.
		</member>
		<member name="process/size_limit" type="int" setter="" getter="" default="0">
			If set to a value greater than [code]0[/code], the size of any texture is limited on import to a value smaller than or equal to the value specified here. For non-square textures, the size limit affects the longer dimension, with the shorter dimension scaled to preserve aspect ratio. Resizing is performed using cubic interpolation.
			This can be used to reduce memory usage without affecting the source images, or avoid issues with textures not displaying on mobile/web platforms (as these usually can't display textures larger than 4096×4096).
			[b]Note:[/b] Even if this is set to [code]0[/code], import size is limited to the following dimensions for technical reasons. Depending on [member compress/mode], textures will be downsampled on import if necessary:
			- [b]Lossy:[/b] 16383 pixels width or height, whichever is larger;
			- [b]Basis Universal:[/b] 16384 pixels width or height, whichever is larger;
			- [b]All other modes:[/b] 32768 pixels width or height, whichever is larger.
		</member>
	</members>
</class>
